package longpipes;

import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;

/**
 * The User Interface which takes in and validates the users input before using
 * it to create a new Pipe.
 *
 * @author GrD-10
 * @version 2.2
 */
public class UserInterface extends javax.swing.JFrame {

    private ArrayList<Pipe> quotedPipes = new ArrayList<Pipe>();
    private double diameterContent = 0;
    private double lengthContent = 0;
    private int gradeContent = 0;
    private int quantityContent = 1;
    private Boolean chemResistContent = false;
    private String colour1Content = "None";
    private String colour2Content = "None";
    private Boolean innerInsulationContent = false;
    private Boolean outerReinforcementContent = false;
    private final DecimalFormat df = new DecimalFormat("###.##");

    /**
     * Creates input Form.
     */
    public UserInterface() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        completeOrderButton.setEnabled(false);
        addToBasketButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        diameterTextField = new javax.swing.JTextField();
        diameterLabel = new javax.swing.JLabel();
        lengthLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pGradeLabel = new javax.swing.JLabel();
        pGradeComboBox = new javax.swing.JComboBox<>();
        colour2Label = new javax.swing.JLabel();
        insulationComboBox = new javax.swing.JComboBox<>();
        completeOrderButton = new javax.swing.JButton();
        insulationLabel = new javax.swing.JLabel();
        colour2ComboBox = new javax.swing.JComboBox<>();
        reinforcementLabel = new javax.swing.JLabel();
        reinforcementComboBox = new javax.swing.JComboBox<>();
        quantityLabel = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        lengthTextField = new javax.swing.JTextField();
        cancelOrderButton = new javax.swing.JButton();
        resistanceLabel = new javax.swing.JLabel();
        resistanceComboBox = new javax.swing.JComboBox<>();
        colour1ComboBox = new javax.swing.JComboBox<>();
        colour1Label = new javax.swing.JLabel();
        addToBasketButton = new javax.swing.JButton();
        diameterErrorLabel = new javax.swing.JLabel();
        lengthErrorLabel = new javax.swing.JLabel();
        quantityErrorLabel = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        diameterTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                diameterTextFieldFocusLost(evt);
            }
        });
        diameterTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diameterTextFieldActionPerformed(evt);
            }
        });

        diameterLabel.setText("Diameter (Inches):");

        lengthLabel.setText("Length (Meters):");

        jLabel3.setText("Pipe Order System");

        pGradeLabel.setText("Plastic grade:");

        pGradeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "1", "2", "3", "4", "5" }));
        pGradeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pGradeComboBoxActionPerformed(evt);
            }
        });

        colour2Label.setText("Colour 2:");

        insulationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        insulationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insulationComboBoxActionPerformed(evt);
            }
        });

        completeOrderButton.setText("Complete Order");
        completeOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeOrderButtonActionPerformed(evt);
            }
        });

        insulationLabel.setText("Insulation:");

        colour2ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Blue", "Green", "Purple", "Yellow" }));
        colour2ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour2ComboBoxActionPerformed(evt);
            }
        });

        reinforcementLabel.setText("Reinforcement:");

        reinforcementComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        reinforcementComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reinforcementComboBoxActionPerformed(evt);
            }
        });

        quantityLabel.setText("Quantity:");

        quantityTextField.setText("1");
        quantityTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityTextFieldFocusLost(evt);
            }
        });
        quantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityTextFieldActionPerformed(evt);
            }
        });

        lengthTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lengthTextFieldFocusLost(evt);
            }
        });
        lengthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthTextFieldActionPerformed(evt);
            }
        });

        cancelOrderButton.setText("Cancel Order");
        cancelOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderButtonActionPerformed(evt);
            }
        });

        resistanceLabel.setText("Chemical Resistance:");

        resistanceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        resistanceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resistanceComboBoxActionPerformed(evt);
            }
        });

        colour1ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Black", "White" }));
        colour1ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour1ComboBoxActionPerformed(evt);
            }
        });

        colour1Label.setText("Colour 1:");

        addToBasketButton.setText("Add Another Order");
        addToBasketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToBasketButtonActionPerformed(evt);
            }
        });

        diameterErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        diameterErrorLabel.setText(" ");

        lengthErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        lengthErrorLabel.setText(" ");

        quantityErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        quantityErrorLabel.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantityErrorLabel)
                    .addComponent(lengthErrorLabel)
                    .addComponent(diameterErrorLabel)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(colour2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(reinforcementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(resistanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lengthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(diameterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(insulationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(colour1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(colour1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(insulationComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reinforcementComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(colour2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pGradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(resistanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(diameterTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lengthTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(addToBasketButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cancelOrderButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(completeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diameterLabel)
                    .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(diameterErrorLabel)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthLabel)
                    .addComponent(lengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(lengthErrorLabel)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pGradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pGradeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colour1Label)
                    .addComponent(colour1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colour2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colour2Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insulationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insulationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reinforcementComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reinforcementLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resistanceLabel)
                    .addComponent(resistanceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityLabel)
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(quantityErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addToBasketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(completeOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method reads the data from the combo box and converts it to a double
     * before finally saving it as the gradeContent variable then calls the
     * AddToBasketButtonOnOff method to check if the order has enough detail to
     * be completed yet.
     *
     * @param evt Action Performed.
     */
    private void pGradeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pGradeComboBoxActionPerformed
        String tempGradeContent;
        if (pGradeComboBox.getSelectedItem().equals("None")) {
            tempGradeContent = "0";
            pGradeLabel.setText("Plastic grade: ");
        } else {
            pGradeLabel.setText("Plastic grade: ✓");
            tempGradeContent = (String) pGradeComboBox.getSelectedItem();
        }
        gradeContent = Integer.parseInt(tempGradeContent);
        AddToBasketButtonOnOff();
    }//GEN-LAST:event_pGradeComboBoxActionPerformed
    /**
     * Changes the value of the variable innerInsulationContent to match the new
     * value of the combo Box.
     *
     * @param evt Action Performed.
     */
    private void insulationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insulationComboBoxActionPerformed
        if (insulationComboBox.getSelectedItem() == "No") {
            innerInsulationContent = false;
            insulationLabel.setText("Insulation: ");
        } else if (insulationComboBox.getSelectedItem() == "Yes") {
            innerInsulationContent = true;
            insulationLabel.setText("Insulation: ✓");
        }
        AddToBasketButtonOnOff();
    }//GEN-LAST:event_insulationComboBoxActionPerformed
    /**
     * Changes the value of the Variable colour2Content to match the new value
     * of the combo Box.
     *
     * @param evt Action Performed.
     */
    private void colour2ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour2ComboBoxActionPerformed

        if (colour2ComboBox.getSelectedItem() == "None") {
            colour2Content = "None";
            colour2Label.setText("Colour 2: ");
        } else {
            colour2Label.setText("Colour 2: ✓");
        }
        colour2Content = (String) colour2ComboBox.getSelectedItem();
    }//GEN-LAST:event_colour2ComboBoxActionPerformed
    /**
     * Changes the value of the Variable outerReinforcementContent to match the
     * new value of the combo Box.
     *
     * @param evt Action Performed.
     */
    private void reinforcementComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reinforcementComboBoxActionPerformed
        if (reinforcementComboBox.getSelectedItem() == "No") {
            outerReinforcementContent = false;
            reinforcementLabel.setText("Reinforcement: ");
        } else if (reinforcementComboBox.getSelectedItem() == "Yes") {
            outerReinforcementContent = true;
            reinforcementLabel.setText("Reinforcement: ✓");
        }
        AddToBasketButtonOnOff();
    }//GEN-LAST:event_reinforcementComboBoxActionPerformed
    /**
     * Sets Focus to Next Input Box.
     *
     * @param evt Action Performed.
     */
    private void quantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityTextFieldActionPerformed
        diameterTextField.requestFocus();
    }//GEN-LAST:event_quantityTextFieldActionPerformed
    /**
     * Creates a new Quote and makes it Visible. (also hides the Input Form)
     *
     * @param evt Action Performed.
     */
    private void completeOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeOrderButtonActionPerformed
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //display the invoice pop up if the user clicks complete order.
        //the order ArrayList is passed so that this class is now able to access
        //the object set in this class
        new Quote(quotedPipes).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_completeOrderButtonActionPerformed
    /**
     * Closes Input Form.
     *
     * @param evt Action Performed.
     */
    private void cancelOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelOrderButtonActionPerformed
    /**
     * Changes the value of the Variable chemResistContent to match the new
     * value of the combo Box.
     *
     * @param evt Action Performed.
     */
    private void resistanceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resistanceComboBoxActionPerformed
        if (resistanceComboBox.getSelectedItem() == "No") {
            chemResistContent = false;
            resistanceLabel.setText("Chemical Resistance: ");
        } else if (resistanceComboBox.getSelectedItem() == "Yes") {
            chemResistContent = true;
            resistanceLabel.setText("Chemical Resistance: ✓");
            quantityTextField.requestFocus();
        }
        AddToBasketButtonOnOff();
    }//GEN-LAST:event_resistanceComboBoxActionPerformed
    /**
     * Changes the value of the Variable colour1Content to match the new value
     * of the combo Box.
     *
     * @param evt Action Performed.
     */
    private void colour1ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour1ComboBoxActionPerformed
        if (colour1ComboBox.getSelectedItem() == "None") {
            colour1Content = "None";
            colour1Label.setText("Colour 1: ");
        } else {
            colour1Label.setText("Colour 1: ✓");
        }
        colour1Content = (String) colour1ComboBox.getSelectedItem();

        AddToBasketButtonOnOff();
    }//GEN-LAST:event_colour1ComboBoxActionPerformed
    /**
     * Validates the pipe and sorts it into the Correct Type then displays an
     * error message for invalid input combinations.
     *
     * @param evt Action Performed.
     */
    private void addToBasketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToBasketButtonActionPerformed
        int colours = checkColours();
        Boolean goodPipe = true;
        Pipe pipeObj;
        if (gradeContent <= 3 && colours == 0 && !innerInsulationContent
                && !outerReinforcementContent) {
            pipeObj = new Type1(diameterContent, lengthContent,
                    gradeContent, chemResistContent, quantityContent);
        } else if (gradeContent >= 2 && gradeContent <= 4 && colours == 1
                && !innerInsulationContent && !outerReinforcementContent) {
            pipeObj = new Type2(diameterContent, lengthContent,
                    gradeContent, chemResistContent, colour1Content, quantityContent);
        } else if (gradeContent >= 2 && colours == 2 && !outerReinforcementContent) {
            if (!innerInsulationContent) {
                pipeObj = new Type3(diameterContent, lengthContent,
                        gradeContent, chemResistContent, colour1Content, colour2Content, quantityContent);
            } else {
                pipeObj = new Type4(diameterContent, lengthContent,
                        gradeContent, chemResistContent, colour1Content, colour2Content, quantityContent);
            }
        } else if (gradeContent >= 3 && colours == 2
                && innerInsulationContent && outerReinforcementContent) {
            pipeObj = new Type5(diameterContent, lengthContent,
                    gradeContent, chemResistContent, colour1Content, colour2Content, quantityContent);
        } else {

            pipeObj = new Type5(diameterContent, lengthContent,
                    gradeContent, chemResistContent, colour1Content, colour2Content, quantityContent);
            goodPipe = false;
            typeErrorFinder();

        }
        if (goodPipe) {
            clearContent();
            quotedPipes.add(pipeObj);            
            completeOrderButton.setEnabled(true);
            AddToBasketButtonOnOff();
        }
    }//GEN-LAST:event_addToBasketButtonActionPerformed
    /**
     * Changes the value of the Variable diameterContent to match the new
     * value of the text Box if the user input passes the validation otherwise 
     * displays an error message.
     *
     * @param evt Focus Lost.
     */
    private void diameterTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_diameterTextFieldFocusLost
        setFocusable(true);
        if (diameterTextField.getText().equals("")) {
            diameterLabel.setText("Diameter (inches): ");
        } else {
            diameterLabel.setText("Diameter (inches): ✓");
        }
        diameterErrorLabel.setText(" ");
        try {
            diameterContent = Double.parseDouble(diameterTextField.getText());
            diameterContent = Double.parseDouble(df.format(diameterContent));
            diameterTextField.setText(Double.toString(diameterContent));
            if (diameterContent < 0.1 || diameterContent > 6) {
                addToBasketButton.setEnabled(false);
                diameterTextField.setText("");
                diameterLabel.setText("Diameter (Inches): ");
                diameterErrorLabel.setText("Pipes must be between 0.1 and 6 inches");
                diameterContent = 0;
            } else {
                AddToBasketButtonOnOff();
            }
        } catch (NumberFormatException nfe) {
            addToBasketButton.setEnabled(false);
            diameterTextField.setText("");
            diameterLabel.setText("Diameter (Inches): ");
            diameterErrorLabel.setText("Please only enter numbers");
        }
    }//GEN-LAST:event_diameterTextFieldFocusLost
    /**
     * Changes the value of the Variable lengthContent to match the new value
     * of the text Box if it p[asses validation otherwise displays an 
     * error message.
     *
     * @param evt Focus Lost.
     */
    private void lengthTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lengthTextFieldFocusLost
        if (!lengthTextField.getText().equals("")) {
            lengthLabel.setText("Length (Meters): ✓");
        } else {
            lengthLabel.setText("Length (Meters): ");
        }
        lengthErrorLabel.setText(" ");
        try {
            lengthContent = Double.parseDouble(lengthTextField.getText());
            lengthContent = Double.parseDouble(df.format(lengthContent));
            lengthTextField.setText(Double.toString(lengthContent));

            if (lengthContent < 0.1 || lengthContent > 6.0) {
                addToBasketButton.setEnabled(false);
                lengthTextField.setText("");
                lengthLabel.setText("Length (Meters): ");
                lengthErrorLabel.setText("Pipes must be between 0.1 and 6 meters");
                lengthContent = 0;
            } else {
                AddToBasketButtonOnOff();
            }
        } catch (NumberFormatException nfe) {
            addToBasketButton.setEnabled(false);
            lengthTextField.setText("");
            lengthLabel.setText("Length (Meters): ");
            lengthErrorLabel.setText("Please only enter numbers");
        }
    }//GEN-LAST:event_lengthTextFieldFocusLost
    /**
     * Changes the value of the variable quantityContent to match the new
     * value of the text Box if it passes validation.
     *
     * @param evt Focus Lost.
     */
    private void quantityTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityTextFieldFocusLost
        if (!quantityTextField.getText().equals("")) {
            quantityLabel.setText("Quantity: ✓");
        } else {
            quantityLabel.setText("Quantity: ");
        }
        quantityErrorLabel.setText(" ");
        try {
            quantityContent = Integer.parseInt(quantityTextField.getText());
            if (quantityContent < 1 || quantityContent > 100) {
                addToBasketButton.setEnabled(false);
                quantityTextField.setText("1");
                quantityContent = 1;       
                quantityErrorLabel.setText("Orders must be between 1 and 100");
            }
        } catch (NumberFormatException nfe) {
            quantityContent = 1;
            addToBasketButton.setEnabled(false);
            quantityTextField.setText("1");
            quantityErrorLabel.setText("Please only enter numbers");
        }
        AddToBasketButtonOnOff();
    }//GEN-LAST:event_quantityTextFieldFocusLost
    /**
     * Sets Focus to lengthTextField input box.
     *
     * @param evt Action Performed.
     */
    private void diameterTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diameterTextFieldActionPerformed
        lengthTextField.requestFocus();
    }//GEN-LAST:event_diameterTextFieldActionPerformed
    /**
     * Sets Focus to Next Input Box.
     *
     * @param evt Action Performed.
     */
    private void lengthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthTextFieldActionPerformed
        pGradeComboBox.requestFocus();
    }//GEN-LAST:event_lengthTextFieldActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToBasketButton;
    private javax.swing.JButton cancelOrderButton;
    private javax.swing.JComboBox<String> colour1ComboBox;
    private javax.swing.JLabel colour1Label;
    private javax.swing.JComboBox<String> colour2ComboBox;
    private javax.swing.JLabel colour2Label;
    private javax.swing.JButton completeOrderButton;
    private javax.swing.JLabel diameterErrorLabel;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JTextField diameterTextField;
    private javax.swing.JComboBox<String> insulationComboBox;
    private javax.swing.JLabel insulationLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lengthErrorLabel;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JTextField lengthTextField;
    private javax.swing.JComboBox<String> pGradeComboBox;
    private javax.swing.JLabel pGradeLabel;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JLabel quantityErrorLabel;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JComboBox<String> reinforcementComboBox;
    private javax.swing.JLabel reinforcementLabel;
    private javax.swing.JComboBox<String> resistanceComboBox;
    private javax.swing.JLabel resistanceLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Calculates how many colours the user selected. Returns 3 if only
     * colour2Content is used.
     *
     * @return the number of colours the user has entered.
     */
    public int checkColours() {
        int colour = 0;
        if (!colour1Content.equals("None")) {
            colour += 1;
            if (!colour2Content.equals("None")) {
                colour += 1;
            }
        } else if (!colour2Content.equals("None")) {
            colour = 3;
        }
        return colour;
    }
    /**
     * Attempts to Diagnose an invalid user input combination and guide the
     * user to select valid options.
     */
    public void typeErrorFinder() {
        if (gradeContent == 4 || gradeContent == 5 && colour1Content.equals("None")
                && colour2Content.equals("None") && !innerInsulationContent
                && !outerReinforcementContent) {
            JOptionPane.showMessageDialog(null,
                    "The options that you have selected do not come with grade of plastic, please select a grade between 1 - 3",
                    "Bad grade ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (gradeContent == 1 && (!colour1Content.equals("None")
                || !colour2Content.equals("None") || innerInsulationContent
                || outerReinforcementContent)) {
            JOptionPane.showMessageDialog(null,
                    "The options you selected do not come with that grade of plastic, please select a grade greater than 1",
                    "Bad grade ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (gradeContent == 5 && !colour1Content.equals("None")
                && colour2Content.equals("None") && !innerInsulationContent && !outerReinforcementContent) {
            JOptionPane.showMessageDialog(null,
                    "The options that you have selected do not come with grade of plastic, please select a grade between 2 - 4",
                    "Bad grade ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (gradeContent == 1 || gradeContent == 2 && outerReinforcementContent) {
            JOptionPane.showMessageDialog(null,
                    "The options that you select do not come with that grade of plastic, please select a grade between 3 - 5",
                    "Bad grade ",
                    JOptionPane.WARNING_MESSAGE);
        } else if ((colour1Content.equals("None") && colour2Content.equals(
                "None")) && (innerInsulationContent || outerReinforcementContent)) {
            JOptionPane.showMessageDialog(null,
                    "The options that you selected must include coloured pipes. Please select from both colour 1 and colour 2",
                    "Bad colour ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (colour1Content.equals("None")) {
            JOptionPane.showMessageDialog(null,
                    "Please select your first colour",
                    "Bad colour ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (colour1Content.equals(
                "None") && !colour2Content.equals("None")) {
            JOptionPane.showMessageDialog(null,
                    "Please select the 1st colour  ",
                    "Bad colour ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (colour2Content.equals(
                "None") && (innerInsulationContent || outerReinforcementContent)) {
            JOptionPane.showMessageDialog(null,
                    "The options that you selected must include coloured pipes. Please select from both colour 1 and colour 2",
                    "Bad colour ",
                    JOptionPane.WARNING_MESSAGE);
        } else if (!innerInsulationContent && outerReinforcementContent) {
            JOptionPane.showMessageDialog(null,
                    "Outer reinforcement requires inner insulation",
                    "Bad pipe ",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null,
                    "Please restart the application and start again",
                    "Application failure",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Enables or disables the AddToBasket Button depending on if the user 
     * has selected a combination of values that could produce a pipe of a 
     * valid type.
     *
     */
    public void AddToBasketButtonOnOff() {
        if (diameterContent != 0 && lengthContent != 0
                && gradeContent != 0 && quantityContent != 0) {
            addToBasketButton.setEnabled(true);
        } else {
            addToBasketButton.setEnabled(false);
        }
    }
//******************REDO THE COMMENTS HERE*********************

    /**
     * Clear content functionality sets all items to their initial states
     * Quantity and chemResist are not reset because they are going to always be
     * added to or kept the same. Note: this is done to let a user understand
     * their order has been added
     */
    public void clearContent(){    
        quantityContent = 1;
        diameterTextField.setText("");
        diameterLabel.setText("Diameter (Inches): ");
        lengthTextField.setText("");
        lengthLabel.setText("Length (Meters): ");
        pGradeComboBox.setSelectedIndex(0);
        pGradeLabel.setText("Plastic grade: ");
        quantityTextField.setText("1");
        resistanceComboBox.setSelectedIndex(0);
        colour1ComboBox.setSelectedIndex(0);
        colour1Label.setText("Colour 1: ");
        colour1Content = "None";
        colour2ComboBox.setSelectedIndex(0);
        colour2Label.setText("Colour 2: ");
        colour2Content = "None";
        insulationComboBox.setSelectedIndex(0);
        insulationLabel.setText("Insulation: ");
        innerInsulationContent = false;
        reinforcementComboBox.setSelectedIndex(0);
        reinforcementLabel.setText("Reinforcement: ");
        outerReinforcementContent = false;       
        chemResistContent = false;        
    }
}